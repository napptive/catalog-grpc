syntax = "proto3";

package catalog;
option go_package = "github.com/napptive/grpc-catalog-go;grpc_catalog_go";

import "validate/validate.proto";

// FileInfo represents all the information of an application file
message FileInfo {
  // Path with the path of the file
  string path = 1 [(validate.rules).string.min_len = 1];
  // Data with the file content
  bytes data = 2;
}

// AddApplicationRequest with a request to add an application to catalog
message AddApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
  // Files with all the application files
  FileInfo file = 2;
}

// DownloadApplicationRequest with the request to download an application
message DownloadApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
}

// RemoveApplicationRequest with the request to remove an application
message RemoveApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
}

// InfoApplicationRequest with the request to ask for an application
message InfoApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
}

// InfoApplicationResponse with the response of an application
message InfoApplicationResponse {
  // Namespace where the application is located.
  string namespace = 1;
  // ApplicationName with the name of the application
  string application_name = 2;
  // Tag associated with the catalog entry.
  string tag = 3;
  // MetadataFile with the content of metadata file
  bytes metadata_file = 4;
  // ReadmeFile with the content of app_config file
  bytes readme_file = 5;
  // Metadata with the metadata object
  ApplicationMetadata metadata = 6;
}

// ApplicationSummary with a resume of an application
message ApplicationSummary {
  // Namespace where the application is located.
  string namespace = 1;
  // ApplicationName with the name of the application
  string application_name = 2;
  // Tag associated with the catalog entry.
  string tag = 3;
  // MetadataName with the name defined in metadata file
  string metadata_name = 4;
}

// ApplicationList with a subset of application summaries.
message ApplicationList {
  // Applications returned as part of a given query.
  repeated ApplicationSummary applications = 1;
}

// KubernetesEntities with the application K8s entities
message KubernetesEntities {
  // ApiVersion with the entity version
  string api_version = 1;
  // Kind with the entity type
  string kind = 2;
  // Name with the entity name
  string name = 3;
}

// ApplicationRequirement with the application requirements in terms of scopes,
// traits or CRD that are required for the application to run.
message ApplicationRequirement {
  // Traits with the application traits
  repeated string traits = 1;
  // Scopes with the application scopes
  repeated string scopes = 2;
  // K8s with all the K8s entities needed
  repeated KubernetesEntities k8s = 3;
}

// ApplicationLogo represents the application logo
message ApplicationLogo {
  // Src with the URL to obtain the logo.
  string src = 1;
  // Type with the logo type (p.e: image/png)
  string type = 2;
  // Size with the logo size (p.e. 120x120)
  string size = 3;
}

// ApplicationMetadata represents the metadata info as provided in the metadata.yaml file.
message ApplicationMetadata {
  // ApiVersion with the version of the metadata api
  string api_version = 1;
  // Kind with the kind of the metadata
  string kind = 2;
  // Name with the name of the application
  string name = 3;
  // Version with the version of the application
  string version = 4;
  // Description with the application description
  string description = 5;
  // Keywords assocaited with the application. In the future, these keywords will facilitate searches.
  repeated string keywords = 6;
  // License associated with the application.
  string license = 7;
  // Url with application information.
  string url = 8;
  // Doc with the application documentation URL.
  string doc = 9;
  // Requires with the application requirements.
  ApplicationRequirement requires = 10;
  // Logo of the application.
  repeated ApplicationLogo logo = 11;
}

// ListApplicationsRequest with the options available when listing applications.
message ListApplicationsRequest {
    // Namespace indicates that the list operation will only affect a given namespace. This value is optional.
    string namespace = 1;
}
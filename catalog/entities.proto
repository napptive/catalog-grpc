syntax = "proto3";

package catalog;
option go_package = "github.com/napptive/grpc-catalog-go;grpc_catalog_go";

import "validate/validate.proto";

// FileInfo represents all the information of an application file
message FileInfo {
  // Path with the path of the file
  string path = 1 [(validate.rules).string.min_len = 1];
  // Data with the file content
  bytes data = 2;
}

// AddApplicationRequest with a request to add an application to catalog
message AddApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
  // Files with all the application files
  FileInfo file = 2;
  // Private with a flag to indicate if the application is private or not
  bool private = 3;
}

// DownloadApplicationRequest with the request to download an application
message DownloadApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
  // Compressed with a boolean to indicate if the response will be a tgz file or not
  bool compressed = 2;
}

// RemoveApplicationRequest with the request to remove an application
message RemoveApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
}

// InfoApplicationRequest with the request to ask for an application
message InfoApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
}

// InfoApplicationResponse with the response of an application
message InfoApplicationResponse {
  // Namespace where the application is located.
  string namespace = 1;
  // ApplicationName with the name of the application
  string application_name = 2;
  // Tag associated with the catalog entry.
  string tag = 3;
  // MetadataFile with the content of metadata file
  bytes metadata_file = 4;
  // ReadmeFile with the content of app_config file
  bytes readme_file = 5;
  // Metadata with the metadata object
  ApplicationMetadata metadata = 6;
  // Private wit a flag to indicate if an application is private or not
  bool private = 7;
}

// ApplicationLogoList with a list of application logo
message ApplicationLogoList {
  // Logo of the application.
  repeated ApplicationLogo logo = 1;
}

// ApplicationSummary with a resume of an application
message ApplicationSummary {
  // Namespace where the application is located.
  string namespace = 1;
  // ApplicationName with the name of the application
  string application_name = 2;
  // TagMetadataName associated with the catalog entry. MetadataName indexed by tag
  map<string, string> tag_metadata_name = 3;
  // SummaryApplicationLogo logos indexed by tag
  map<string, ApplicationLogoList> summary_application_logo = 4;
  // Private indicate the application scope
  bool private = 5;
}

// ApplicationList with a subset of application summaries.
message ApplicationList {
  // Applications returned as part of a given query.
  repeated ApplicationSummary applications = 1;
}

// KubernetesEntities with the application K8s entities
message KubernetesEntities {
  // ApiVersion with the entity version
  string api_version = 1;
  // Kind with the entity type
  string kind = 2;
  // Name with the entity name
  string name = 3;
}

// ApplicationRequirement with the application requirements in terms of scopes,
// traits or CRD that are required for the application to run.
message ApplicationRequirement {
  // Traits with the application traits
  repeated string traits = 1;
  // Scopes with the application scopes
  repeated string scopes = 2;
  // K8s with all the K8s entities needed
  repeated KubernetesEntities k8s = 3;
}

// ApplicationLogo represents the application logo
message ApplicationLogo {
  // Src with the URL to obtain the logo.
  string src = 1;
  // Type with the logo type (p.e: image/png)
  string type = 2;
  // Size with the logo size (p.e. 120x120)
  string size = 3;
}

// ApplicationMetadata represents the metadata info as provided in the metadata.yaml file.
message ApplicationMetadata {
  // ApiVersion with the version of the metadata api
  string api_version = 1;
  // Kind with the kind of the metadata
  string kind = 2;
  // Name with the name of the application
  string name = 3;
  // Version with the version of the application
  string version = 4;
  // Description with the application description
  string description = 5;
  // Keywords assocaited with the application. In the future, these keywords will facilitate searches.
  repeated string keywords = 6;
  // License associated with the application.
  string license = 7;
  // Url with application information.
  string url = 8;
  // Doc with the application documentation URL.
  string doc = 9;
  // Requires with the application requirements.
  ApplicationRequirement requires = 10;
  // Logo of the application.
  repeated ApplicationLogo logo = 11;
}

// ListApplicationsRequest with the options available when listing applications.
message ListApplicationsRequest {
    // Namespace indicates that the list operation will only affect a given namespace. This value is optional.
    string namespace = 1;
}

// SummaryResponse with a summary of the number of applications in the catalog
message SummaryResponse {
  // NumNamespaces with the number of users (namespaces) in the catalog
  int32 num_namespaces = 1;
  // NumApplications with the number of different applications
  int32 num_applications = 2;
  // NumTags wit the number of the different versions of applications
  int32 num_tags = 3;
}

// DeleteNamespaceRequest with the information required to delete a namespace.
message DeleteNamespaceRequest {
  // Namespace where the application is located.
  string namespace = 1 [(validate.rules).string.min_len = 1];
}

//
// Applications
//

// ApplicationInstanceConfiguration  with the configuration with wich the application will be deployed
message ApplicationInstanceConfiguration{
    // ApplicationDefaultName with the application instance name by default
    string application_default_name = 1;
    // SpecComponentsRaw with the component specification in yaml format (parameters, traits, etc.)
    string spec_components_raw = 2;
}

// DeployApplicationRequest with the information required to send a
// deploy request.
message DeployApplicationRequest{
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
  // TargetEnvironmentQualifiedName specifying the target environment in the user
  // account as account_name/env_name.
  string target_environment_qualified_name = 2 [(validate.rules).string.min_len = 1];
  // TargetPlaygroundAPIURL indicating the url to which redirect the request.
  string target_playground_api_url = 3 [(validate.rules).string.min_len = 1];
  // InstanceConfiguration with the configuration which the application will be deployed
  // indexed by the original application name. This approach enables the catalog to support
  // application packages that deploy more than one application.
  map<string, ApplicationInstanceConfiguration> instance_configuration = 4;
}

// GetConfigurationRequest with the information required to ask for an application configuration
message GetConfigurationRequest{
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
}

// GetConfigurationResponse with application configuration
message GetConfigurationResponse{
    // IsApplication with a flag to indicate if the catalog application contains an oam application or not
    // The user the might want store component definitions in the catalog and deploy them. In this case, 
    // the "appliation" in the catalog does no correspond to an oam application
    bool is_application = 1;
    // ApplicationDefaultName with the application instance name by default
    string application_default_name = 2;
    // SpecComponentsRaw with the component specification in yaml format (parameters, traits, etc.)
    string spec_components_raw = 3;
}

message UpdateRequest {
  // Namespace where the application is located.
  string namespace = 1 [(validate.rules).string.min_len = 1];
  // ApplicationName with the name of the application
  string application_name = 2 [(validate.rules).string.min_len = 1];
  // Private with the application visibility
  bool private = 3;
}

// UploadApplicationRequest with a request to add a complete application to the catalog
message UploadApplicationRequest {
  // ApplicationId with the identifier of an application using the
  // same approach as docker:
  // [catalogURL/]namespace/appName[:tag]
  string application_id = 1 [(validate.rules).string.min_len = 1];
  // Files with all the application files
  repeated Base64FileInfo files = 2;
  // Private with a flag to indicate if the application is private or not
  bool private = 3;
}

// Base64FileInfo represents all the information of an application file with the content encoded in base64.
message Base64FileInfo {
  // Path with the path of the file
  string path = 1 [(validate.rules).string.min_len = 1];
  // Data with the file content
  string data = 2 [(validate.rules).string.min_len = 1];
}

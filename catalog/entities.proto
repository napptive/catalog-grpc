syntax = "proto3";

package catalog;
option go_package = "github.com/napptive/grpc-catalog-go;grpc_catalog_go";

import "validate/validate.proto";

// FileInfo represents all the information of an application file
message FileInfo {
  // Path with the path of the file
  string path = 1 [(validate.rules).string.min_len = 1];
  // Data with the file content
  bytes data = 2;
}

// AddApplicationRequest with a request to add an application to catalog
message AddApplicationRequest {
  // ApplicationName with the name of the application
  // The Applicacion name uses the same approach as docker naming
  // [catalogURL/]repoName/appName[:tag]
  string application_name = 1 [(validate.rules).string.min_len = 1];
  // Files with all the application files
  FileInfo file = 2;
}

// DownloadApplicationRequest with the request to download an application
message DownloadApplicationRequest {
  // ApplicationName with the name of the application
  // The Applicacion name uses the same approach as docker naming
  // [catalogURL/]repoName/appName[:tag]
  string application_name = 1 [(validate.rules).string.min_len = 1];
}

// RemoveApplicationRequest with the request to remove an application
message RemoveApplicationRequest {
  // ApplicationName with the name of the application
  // [catalogURL/]repoName/appName[:tag]
  string application_name = 1 [(validate.rules).string.min_len = 1];
}

// InfoApplicationRequest with the request to ask for an application
message InfoApplicationRequest {
  // ApplicationName with the name of the application
  // [catalogURL/]repoName/appName[:tag]
  string application_name = 1 [(validate.rules).string.min_len = 1];
}

// InfoApplicationResponse with the response of an application
message InfoApplicationResponse {
  // RepositoryName with the name of the repository
  string repository_name = 1;
  // ApplicationName with the name of the application
  string application_name = 2;
  // Tag with the tag of the application
  string tag = 3;
  // MetadataFile with the content of metadata file
  bytes metadata_file = 4;
  // ReadmeFile with the content of app_config file
  bytes readme_file = 5;
  // Metadata with the metadata object
  CatalogMetadata metadata = 6;
}

// ApplicationSummary with a resume of an application
message ApplicationSummary {
  // RepositoryName with the name of the repository
  string repository_name = 1;
  // ApplicationName with the name of the application
  string application_name = 2;
  // Tag with the tag of the application
  string tag = 3;
  // MetadataName with the name defined in metadata file
  string metadata_name = 4;
}

// ApplicationList with a list of application resume
message ApplicationList {
  repeated ApplicationSummary applications = 1;
}

// KubernetesEntities with the application K8s entities
message KubernetesEntities {
  // ApiVersion with the entity version
  string api_version = 1;
  // Type with the entity type
  string type = 2;
  // Name with the entity name
  string name = 3;
}

// CatalogRequirement with the application requirements
message CatalogRequirement {
  // Traits with the application traits
  repeated string traits = 1;
  // Scopes with the application scopes
  repeated string scopes = 2;
  // K8s with all the K8s entities needed
  KubernetesEntities k8s = 3;
}

// ApplicationLogo represents the application logo
message ApplicationLogo {
  // Src with the src URL
  string src = 1;
  // Type with the logo type (p.e: image/png)
  string type = 2;
  // Size with the logo size (p.e. 120x120)
  string size = 3;
}

// CatalogMetadata represents the metadata info
message CatalogMetadata {
  // ApiVersion with the version of the metadata api
  string api_version = 1;
  // Kind with the kind of the metadata
  string kind = 2;
  // Name with the name of the application
  string name = 3;
  // Version with the version of the application
  string version = 4;
  // Description with the application description
  string description = 5;
  // Tags with the application tags. In the future, these tags will facilitate searches
  repeated string tags = 6;
  // license with the catalog license
  string license = 7;
  // Url with the URL
  string url = 8;
  // Doc with the URL to documentation
  string doc = 9;
  // Requires with the application requirement
  CatalogRequirement requires = 10;
  // Logo with the application logo
  ApplicationLogo logo = 11;
}